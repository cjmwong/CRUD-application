import Monsters from "../models/monster.model.js";


/**
 * Find monsters in repository. If query is empty, returns list of all monsters. Otherwise
 * searches monster by id
 */
export const getMonstersFromRepo = async (query) => {
    try {
        const monsters = await Monsters.find(query);
        return monsters;
    } catch (e) {
        throw Error("Error fetching monsters");
    }
};

/**
 * Creates a monster and adds it in repository with id field being autogenerated
 */
export const createMonsterInRepo = async (payload) => {
    try {
        const currMaxID = await Monsters.find().sort({id: -1}).limit(1);
        const newID = currMaxID[0].id + 1;
        payload["id"] = newID;

        const newMonster = new Monsters(payload);
        const savedMonster = await newMonster.save();
        return savedMonster;
    } catch (e) {
        throw Error("Error while creating a monster");
    }
}


/**
 * Searches for monster by id and apply specified changes.
 */
export const updateMonsterInRepo = async (query, changes) => {
    try {
        const monster = await Monsters.findOneAndUpdate(
          { ...query },
          { ...changes },
          { new: true }
        ).lean();
        return monster;
      } catch (e) {
        throw Error("Error while updating monster");
      }
};

/**
 * Searches for monster by id and deletes from the repository if found.
 */
export const deleteMonsterFromRepo = async (query) => {
    try {
        const monster = await Monsters.findOneAndDelete({ ...query });
        return monster;
      } catch (e) {
        throw Error("Error while deleting a monster");
      }
};
